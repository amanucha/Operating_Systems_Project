#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <signal.h>
#include <math.h>

#define BUFFER_SIZE 1024
#define MAX_VALUES 10
#define DATA_FILE_NAME "data.txt"
#define MAX_LINE_LENGTH 100

FILE *fp = NULL;
int terminate = 0;

void sigintHandler(int sig_num){
    terminate = 1;
    signal(SIGINT, sigintHandler);
    printf("\nTerminating telnet connection...\n");   
    if (fp != NULL) {
        pclose(fp);
    }
    system("pkill -9 telnet"); 
    exit(0);
}

int main(int argc, char **argv) {
    int i;
    printf("@focus off\n"); 		
    printf("@g0 on\n");                     
    printf("@default linewidth 3\n");
    printf("@default linestyle 1\n");
    printf("@default color 4\n");
    printf("@default pattern 1\n");
    printf("@default font 2\n");
    printf("@default char size 1.000000\n");
    printf("@default symbol size 0.23\n");
    printf("@background color 9\n");
    printf("@frame background color 5\n");
    printf("@frame background pattern 3\n");
    printf("@with g0\n");                   
    printf("@view 0.1, 0.1, 1.2, 0.9\n");   
    printf("@subtitle \" A vs B \"\n");     

    signal(SIGINT, sigintHandler); 

    fp = popen("telnet 192.168.4.1 23", "r");

    if (fp == NULL) {
        printf("Failed to open pipe.\n");
        return 1;
    }

    char buffer[BUFFER_SIZE];
    char* token;
    float values[MAX_VALUES];
    int k = 0;
    int first_run = 1;
    int first_run2 = 1;
    while(!terminate) {
        fseek(fp, 0, SEEK_END);              
        while (fgets(buffer, BUFFER_SIZE, fp) && !terminate) {
            if (strlen(buffer) > 0 && k < MAX_VALUES) {
                if(first_run2){
                    k = k-1;
                    first_run2 = 0;
                }
                char* first = strtok(buffer, ", ");
                char* second = first ? strtok(NULL, ", ") : NULL;
                token = second ? strtok(NULL, ", ") : NULL;
                if(token){
                   values[k++] = atof(token); 
                }  
            } else {
	printf("@with g0\n");               
        printf("@kill s0\n"); 
                for (i = 0; i < k; i++) {
                    printf("%d %f\n", i, values[i]);
                }
		printf("&\n");
                sleep(1);
                k = 0;
                if (first_run) {
                    printf("@autoscale\n"); 
                    first_run = 0;         
                }
                printf("@redraw\n");
                printf("@sleep 0.1\n");   
            }
        }
    }
    pclose(fp);
    return 0;
}